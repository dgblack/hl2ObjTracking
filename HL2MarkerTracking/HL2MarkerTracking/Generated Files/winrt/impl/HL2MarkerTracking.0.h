// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.220531.1

#pragma once
#ifndef WINRT_HL2MarkerTracking_0_H
#define WINRT_HL2MarkerTracking_0_H
WINRT_EXPORT namespace winrt::Windows::Perception::Spatial
{
    struct SpatialCoordinateSystem;
}
WINRT_EXPORT namespace winrt::HL2MarkerTracking
{
    struct IMarkerTracker;
    struct IMarkerTrackerFactory;
    struct MarkerTracker;
}
namespace winrt::impl
{
    template <> struct category<winrt::HL2MarkerTracking::IMarkerTracker>{ using type = interface_category; };
    template <> struct category<winrt::HL2MarkerTracking::IMarkerTrackerFactory>{ using type = interface_category; };
    template <> struct category<winrt::HL2MarkerTracking::MarkerTracker>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::HL2MarkerTracking::MarkerTracker> = L"HL2MarkerTracking.MarkerTracker";
    template <> inline constexpr auto& name_v<winrt::HL2MarkerTracking::IMarkerTracker> = L"HL2MarkerTracking.IMarkerTracker";
    template <> inline constexpr auto& name_v<winrt::HL2MarkerTracking::IMarkerTrackerFactory> = L"HL2MarkerTracking.IMarkerTrackerFactory";
    template <> inline constexpr guid guid_v<winrt::HL2MarkerTracking::IMarkerTracker>{ 0x0E5856A2,0xC2F5,0x539B,{ 0xB7,0xA7,0x67,0xB5,0xD7,0xE3,0xB6,0x34 } }; // 0E5856A2-C2F5-539B-B7A7-67B5D7E3B634
    template <> inline constexpr guid guid_v<winrt::HL2MarkerTracking::IMarkerTrackerFactory>{ 0x13C48375,0x3EDB,0x545E,{ 0xA7,0x7F,0x46,0x04,0x30,0x41,0x94,0x78 } }; // 13C48375-3EDB-545E-A77F-460430419478
    template <> struct default_interface<winrt::HL2MarkerTracking::MarkerTracker>{ using type = winrt::HL2MarkerTracking::IMarkerTracker; };
    template <> struct abi<winrt::HL2MarkerTracking::IMarkerTracker>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetRawDepthMap(uint32_t* __resultSize, uint16_t**) noexcept = 0;
            virtual int32_t __stdcall GetProcessedDepthMap(uint32_t* __resultSize, uint8_t**) noexcept = 0;
            virtual int32_t __stdcall GetRawIrImage(uint32_t* __resultSize, uint16_t**) noexcept = 0;
            virtual int32_t __stdcall GetProcessedIrImage(uint32_t* __resultSize, uint8_t**) noexcept = 0;
            virtual int32_t __stdcall GetLfImage(int64_t*, uint32_t* __resultSize, uint8_t**) noexcept = 0;
            virtual int32_t __stdcall GetRfImage(int64_t*, uint32_t* __resultSize, uint8_t**) noexcept = 0;
            virtual int32_t __stdcall GetLrfImages(int64_t*, int64_t*, uint32_t* __resultSize, uint8_t**) noexcept = 0;
            virtual int32_t __stdcall SetROI(int32_t, int32_t, int32_t) noexcept = 0;
            virtual int32_t __stdcall SetDevicePose(uint32_t, float*) noexcept = 0;
            virtual int32_t __stdcall GetObjectPose(uint32_t* __resultSize, double**) noexcept = 0;
            virtual int32_t __stdcall SetParams(int32_t, int32_t, int32_t, float, float, float, bool, bool, bool, bool, bool, bool) noexcept = 0;
            virtual int32_t __stdcall SetExtrinsicsOffset(uint32_t, float*) noexcept = 0;
            virtual int32_t __stdcall DepthMapUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall IrImageUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall LfImageUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall RfImageUpdated(bool*) noexcept = 0;
            virtual int32_t __stdcall InitializeDepthSensor() noexcept = 0;
            virtual int32_t __stdcall InitializeStereoCamerasFront() noexcept = 0;
            virtual int32_t __stdcall StartDepthSensorLoop() noexcept = 0;
            virtual int32_t __stdcall StartStereoCamerasFrontLoop() noexcept = 0;
            virtual int32_t __stdcall StopAllSensorDevice() noexcept = 0;
            virtual int32_t __stdcall SetReferenceCoordinateSystem(void*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::HL2MarkerTracking::IMarkerTrackerFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateInstance(uint32_t, float*, uint32_t, float*, bool, void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_HL2MarkerTracking_IMarkerTracker
    {
        auto GetRawDepthMap() const;
        auto GetProcessedDepthMap() const;
        auto GetRawIrImage() const;
        auto GetProcessedIrImage() const;
        auto GetLfImage(int64_t& ts) const;
        auto GetRfImage(int64_t& ts) const;
        auto GetLrfImages(int64_t& ts_left, int64_t& ts_right) const;
        auto SetROI(int32_t x, int32_t y, int32_t w) const;
        auto SetDevicePose(array_view<float const> pose) const;
        auto GetObjectPose() const;
        auto SetParams(int32_t minArea, int32_t maxArea, int32_t binThreshold, float convexity, float circularity, float smoothing, bool contours, bool m_saveIrImages, bool saveDepthImages, bool saveLeftImages, bool saveRightImages, bool saveRaw) const;
        auto SetExtrinsicsOffset(array_view<float const> ext) const;
        auto DepthMapUpdated() const;
        auto IrImageUpdated() const;
        auto LfImageUpdated() const;
        auto RfImageUpdated() const;
        auto InitializeDepthSensor() const;
        auto InitializeStereoCamerasFront() const;
        auto StartDepthSensorLoop() const;
        auto StartStereoCamerasFrontLoop() const;
        auto StopAllSensorDevice() const;
        auto SetReferenceCoordinateSystem(winrt::Windows::Perception::Spatial::SpatialCoordinateSystem const& refCoord) const;
    };
    template <> struct consume<winrt::HL2MarkerTracking::IMarkerTracker>
    {
        template <typename D> using type = consume_HL2MarkerTracking_IMarkerTracker<D>;
    };
    template <typename D>
    struct consume_HL2MarkerTracking_IMarkerTrackerFactory
    {
        auto CreateInstance(array_view<float const> geometry, array_view<float const> extrinsicsCorrection, bool verbose) const;
    };
    template <> struct consume<winrt::HL2MarkerTracking::IMarkerTrackerFactory>
    {
        template <typename D> using type = consume_HL2MarkerTracking_IMarkerTrackerFactory<D>;
    };
}
#endif
