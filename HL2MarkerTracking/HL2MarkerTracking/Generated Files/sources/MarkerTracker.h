#pragma once
#include "MarkerTracker.g.h"

// WARNING: This file is automatically generated by a tool. Do not directly
// add this file to your project, as any changes you make will be lost.
// This file is a stub you can use as a starting point for your implementation.
//
// To add a copy of this file to your project:
//   1. Copy this file from its original location to the location where you store 
//      your other source files (e.g. the project root). 
//   2. Add the copied file to your project. In Visual Studio, you can use 
//      Project -> Add Existing Item.
//   3. Delete this comment and the 'static_assert' (below) from the copied file.
//      Do not modify the original file.
//
// To update an existing file in your project:
//   1. Copy the relevant changes from this file and merge them into the copy 
//      you made previously.
//    
// This assertion helps prevent accidental modification of generated files.
static_assert(false, "This file is generated by a tool and will be overwritten. Open this error and view the comment for assistance.");

namespace winrt::HL2MarkerTracking::implementation
{
    struct MarkerTracker : MarkerTrackerT<MarkerTracker>
    {
        MarkerTracker() = default;

        MarkerTracker(array_view<float const> geometry, array_view<float const> extrinsicsCorrection, float markerDiameter, bool verbose);
        com_array<uint16_t> GetRawDepthMap();
        com_array<uint8_t> GetProcessedDepthMap();
        com_array<uint16_t> GetRawIrImage();
        com_array<uint8_t> GetProcessedIrImage();
        com_array<uint8_t> GetLfImage(int64_t& ts);
        com_array<uint8_t> GetRfImage(int64_t& ts);
        com_array<uint8_t> GetLrfImages(int64_t& ts_left, int64_t& ts_right);
        void SetROI(int32_t x, int32_t y, int32_t w);
        void SetDevicePose(array_view<float const> pose);
        bool HasNewPose();
        com_array<double> GetObjectPose();
        com_array<double> GetObjectPoseAndMarkers();
        void SetParams(int32_t minArea, int32_t maxArea, int32_t binThreshold, float convexity, float circularity, float smoothing, bool contours, bool m_saveIrImages, bool saveDepthImages, bool saveLeftImages, bool saveRightImages, bool saveRaw);
        void SetJumpSettings(bool doFilter, float threshold, int32_t nFrames);
        void SetExtrinsicsOffset(array_view<float const> ext);
        bool DepthMapUpdated();
        bool IrImageUpdated();
        bool LfImageUpdated();
        bool RfImageUpdated();
        void InitializeDepthSensor();
        void InitializeStereoCamerasFront();
        void StartDepthSensorLoop();
        void StartStereoCamerasFrontLoop();
        void StopAllSensorDevice();
        void SetReferenceCoordinateSystem(winrt::Windows::Perception::Spatial::SpatialCoordinateSystem const& refCoord);
    };
}
namespace winrt::HL2MarkerTracking::factory_implementation
{
    struct MarkerTracker : MarkerTrackerT<MarkerTracker, implementation::MarkerTracker>
    {
    };
}
